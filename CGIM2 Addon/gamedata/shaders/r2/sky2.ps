#include "common.h"
#include "rainbow_draw.h"

struct v2p
{
    half4 factor : COLOR0; // for SM3 - factor.rgb - tonemap-prescaled
    half4 tc0 : TEXCOORD0;
    half3 tc1 : TEXCOORD1;
};

struct _out
{
    half4 low : COLOR0;
    half4 high : COLOR1;
};

uniform samplerCUBE s_sky0 : register(s0);
uniform samplerCUBE s_sky1 : register(s1);

//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
_out main(v2p I)
{
    half3 s0 = texCUBE(s_sky0, I.tc0).rgb;
    half3 s1 = texCUBE(s_sky1, I.tc1).rgb;
    half3 sky = I.factor.bgr * lerp(s0, s1, I.factor.w) * 2.0f / 3.0f * I.tc0.w;

    // final tone-mapping
    _out o;

    o.low = sky.xyzz;
    o.high = sky.xyzz / def_hdr;
	
	float diff_green_red = L_sun_color.g - L_sun_color.r;
	float diff_green_blue = L_sun_color.g - L_sun_color.b;
	float amount = (diff_green_red-RB_GREENREDDIFF)+(diff_green_blue-RB_GREENBLUEDIFF);
#ifdef WINTER_MODE
	if (I.tc0.z >= RB_VIEWANGLE.x && I.tc0.z <= RB_VIEWANGLE.y && I.tc0.y >= RB_VIEWANGLE.z && I.tc0.y <= RB_VIEWANGLE.w && amount > 0 && rain_params.x > 0)
	{	
		float sun_intensity = saturate((L_sun_color.r+L_sun_color.g+L_sun_color.b)*RB_SUNFACTOR/3);
		bool white = false;
		o.low += draw_rainbow(I.tc0.xy, RB_POSITION, sun_intensity, true, white) * amount * RB_COF;
	}
#endif //WINTER_MODE

    return o;
};