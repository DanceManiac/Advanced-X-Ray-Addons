--[[ -----------------------------------------------------------------------------------------------
 File		 : level_weathers.script
 Description : level weather manager
 Copyright	 : 2004 © GSC Game World & 2020 © M.F.S. Team 
 Author		 : GSC Game World
 Modified    : for G.S.W.R. by ggGhosTt
--]] -----------------------------------------------------------------------------------------------
--/											  Variables
--]] -----------------------------------------------------------------------------------------------
local weather_manager = nil
local weather_name = utils.cfg_get_string(ini_file("game.ltx"), 
	level.name(), "weathers", db.actor, false, "", "")
local winter_mode = utils.cfg_get_bool(ini_file("mfs_team\\mfs_weather_params.ltx"),
	"environment","winter_mode", db.actor, false)
--]] -----------------------------------------------------------------------------------------------
--/											  Functions
--]] -----------------------------------------------------------------------------------------------
class "WeatherManager"
function WeatherManager:__init()
    self.transition_period = false
    self.pre_blowout_period = false
	self.last_hour = 0
	self.last_period_change_hour = level.get_time_hours()
	self.forced_weather_change_on_time_change = false
    self.wfx_time = 0
	self.weather_fx = nil
	self.update_time = 0
	self.update_level = ""
	self.graphs_ini = ini_file("environment\\dynamic_weather_graphs.ltx")
	self.period = "good"
	self.state = {}
	self.graphs = {}
end
-- Called after load(). Weather state is already loaded.
function WeatherManager:reset()	
    self.levelWeather = weather_name -- Getting section, checking for winter mode.
	self.weather_list = xr_logic.parse_condlist(db.actor, level.name(), "weather", weather_name) 
	-- Reading period hours if level is not underground.
    if weather_name == "outdoor" then
	    -- self.tweaks = xr_s.parse_ini_section_to_array(self.graphs_ini, level.name().."_periods_length")
		self.tweaks = xr_s.parse_ini_section_to_array(self.graphs_ini, "periods_length")
	    self.next_period_change_hour = self:get_next_period_change_hour(self.period)
	end
    -- End reading period hours.
	self.last_hour = level.get_time_hours()
    self:select_weather(true)
end

function WeatherManager:get_next_period_change_hour(period)
	local hour = 0
	if period == "good" then 
		hour = math.random(self.tweaks["period_good_length_min"], self.tweaks["period_good_length_max"]) + self.last_period_change_hour + 1
	else
		hour = math.random(self.tweaks["period_bad_length_min"], self.tweaks["period_bad_length_max"]) + self.last_period_change_hour + 1
	end
	if hour > 23 then
		hour = hour - 24
	end
	return hour
end

function WeatherManager:change_period()
	local current_hour = level.get_time_hours()

    if current_hour == self.next_period_change_hour then
        if self.period == "good" then		
			self.period = "bad"
		else
			self.period = "good"
		end
		self.last_period_change_hour = current_hour
		self.next_period_change_hour = self:get_next_period_change_hour(self.period)
		self.transition_period = true
	end
end

function WeatherManager:forced_weather_change()
	self.forced_weather_change_on_time_change = true
end
-- Weather is updated every hour. 
function WeatherManager:update()
	if (level.is_wfx_playing()) then
		self.weather_fx = level.get_weather()
	else
		self.weather_fx = nil
	end
	if self.last_hour ~= level.get_time_hours() then
		self.last_hour = level.get_time_hours()
		for lvl,st in pairs(self.state) do
			st.current_state = st.next_state
			st.next_state = get_next_state(st.graph,st.current_state)
		end
 -- Changing period if weather is not undeground.
		if weather_name == "outdoor" then
			self:change_period()
		end
 -- End changing period.
 -- Setting weather on the current level.
		self:select_weather(false)
 -- End setting weather on the current level.
	end
 -- Getting data for debug
	if swe_debug then
	    local ltpd_cehr_dbg, ntpd_cehr_dbg, wthr_sect_dbg = ""
		level_weathers.ltpd_cehr_dbg = self.last_period_change_hour
		level_weathers.ntpd_cehr_dbg = self.next_period_change_hour
		level_weathers.wthr_sect_dbg = self.levelWeather
	end
 --	End getting data for debug
end
-- Moon phases functional.
function WeatherManager:get_moon_phase()
	local months = {31,28,31,30,31,30,31,31,30,31,30,31}
	local g_time = game.get_game_time()
	local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
	Y, M, D, h, m, s, ms = g_time:get(Y, M, D, h, m, s, ms)
	local day = 365 * (Y - 2010) + D
	for mm = 1, M - 1 do
		day = day + months[mm]
	end
	if h >= 12 then
		day = day + 1
	end
	local phase = math.floor(math.mod (day, 28) / 3.5)
       -- phase = math.mod(day, 8)
    return tostring(phase)
end
-- End moon phases functional.

function WeatherManager:select_weather(now)
	local weather = xr_logic.pick_section_from_condlist(db.actor, db.actor, self.weather_list)
    -- Breaking down outdoor weather to stated periods. 
    if weather == "outdoor" then
	    --[[if self.transition_period then
			weather = level.name().."_transition"
			self.transition_period = false
		elseif self.pre_blowout_period then
			weather = level.name().."_pre_blowout"
			self.pre_blowout_period = false
	    else
            weather = level.name().."_"..self.period
		end --]]
		if winter_mode then
			if self.transition_period then
				weather = "gswr_winter_transition"
				self.transition_period = false
			elseif self.pre_blowout_period then
				weather = "gswr_winter_pre_blowout"
				self.pre_blowout_period = false
			else
				weather = "gswr_winter_"..self.period
			end
		else
			if self.transition_period then
				weather = "gswr_transition"
				self.transition_period = false
			elseif self.pre_blowout_period then
				weather = "gswr_pre_blowout"
				self.pre_blowout_period = false
			else
				weather = "default_"..self.period
			end
		end
	end 
    -- End breaking down outdoor weather to periods.
    self.levelWeather = weather -- Getting broken section.
	local graph = self:get_graph_by_name(weather)
	local weather_section_name = ""
    -- Checking if the current level graph matches the one obtained by the condlist.
	if graph == nil then
        -- Using static weather.
	    self.state[weather] = nil
	    weather_section_name = weather
	else
        -- Using dynamic weather.
	    if self.state[weather] == nil or self.state[weather].graph_name ~= weather then
		    self.state = {}
		    self.state[weather] = self:init_by_graph(graph,weather)
	    end
        -- Getting section name according to the current state.
	    local st = self.state[weather]
		weather_section_name="default_"..st.current_state
		
        -- Applying moon phase to the weather section name.   
	    if st.current_state == "temp1" or st.current_state == "temp2" then
		    weather_section_name = weather_section_name.."_"..self:get_moon_phase()
        end  
		-- End applying moon phase.
	end
	if now then
		self.last_hour = level.get_time_hours()
	end
	if self.forced_weather_change_on_time_change then
		now = true
		self.forced_weather_change_on_time_change = false
	end
	if not(self.weather_fx) then
		level.set_weather(weather_section_name, now)
	end
end
-- Returns initial weather state.
function WeatherManager:init_by_graph(graph, graph_name)
	local cur_state = get_next_state(graph ,"")
	local next_state = get_next_state(graph, cur_state)
	return {current_state = cur_state, next_state = next_state, graph_name = graph_name, graph = graph}
end
-- Returns graph state according to the listed probabilities.
function get_next_state(graph, state)
	local sum = 0
	for st, prob in pairs(graph) do
		sum = sum + prob
	end
	local rnd = math.random() * sum
	local next_state
	for st, prob in pairs(graph) do
		next_state = st
		rnd = rnd - prob
		if (rnd <= 0) then
			break
		end
	end
	return next_state
end
-- Setting manager state by parsing state to string.
function WeatherManager:set_state_as_string(ss)
	self.state = {}
	for lvlstring in string.gmatch(ss, "[^;]+") do
		local i,j, grname, curs, nexs = string.find(lvlstring, "([^=]+)=([^,]+),([^,]+)")
		if not grname then
			abort("WeatherManager:set_state_as_string: malformed state string. "..ss)
		end
		local current_state = self:unpack_state(curs)
		local next_state = self:unpack_state(nexs)
		local graph_name = self:unpack_graph_name(grname)
		local graph = self:get_graph_by_name(graph_name)
        if graph == nil then
        else
		self.state[graph_name] = {current_state = current_state, next_state = next_state, graph_name = graph_name, graph = graph}
        end
    end
end
-- Turning current manager state to string.
function WeatherManager:get_state_as_string()
	local lvlstrings = {}
	for lvl_name, st in pairs(self.state) do
		local curs = self:pack_state(st.current_state)
		local nexs = self:pack_state(st.next_state)
		local grn = self:pack_graph_name(st.graph_name)
		table.insert(lvlstrings,grn.."="..curs..","..nexs)
	end
	return table.concat(lvlstrings, ";")
end
-- Getting graph (table of weather state changes) by its and level name.
function WeatherManager:get_graph_by_name(name)
	if not self.graphs[name] then
		self.graphs[name] = xr_s.parse_ini_section_to_array(self.graphs_ini, name)
	end
	return self.graphs[name]
end
-- Pack the name of the graph vertex.
function WeatherManager:pack_state(state)
    -- Not packing now
	return state
end
-- Unpack the name of the graph vertex.
function WeatherManager:unpack_state(st)
    -- Not packing now
	return st
end
-- Pack the name of the weather transitions graph.
function WeatherManager:pack_graph_name(graph_name)
    -- Not packing now
	return graph_name
end
-- Unpack the name of the weather transitions graph.
function WeatherManager:unpack_graph_name(grn)
    -- Not packing now
	return grn
end

function WeatherManager:load(F)
	set_save_marker(F, "load", false, "WeatherManager")
	printf("WEATHER LOAD")
	self.levelWeather = F:r_stringZ()
	self.period = F:r_stringZ()
	-- if self.levelWeather == level.name().."_transition" then
	if self.levelWeather == "gswr_transition" 
		or self.levelWeather == "gswr_winter_transition" then
		self.transition_period = true
	end
    -- if self.levelWeather == level.name().."_pre_blowout" then
	if self.levelWeather == "gswr_pre_blowout" 
		or self.levelWeather == "gswr_winter_pre_blowout" then
		self.pre_blowout_period = true
	end
	self.last_period_change_hour = F:r_u32();
	self.next_period_change_hour = F:r_u32();
	local state_string = F:r_stringZ();
	printf("str = "..state_string)
	if state_string == "" then
		printf("str = empty string")
	end
	self:set_state_as_string(state_string)
	self.update_time = F:r_u32();
	local str = F:r_stringZ()
	if(str ~= "nil") then
		self.weather_fx = str
		self.wfx_time = F:r_float()
	end
	set_save_marker(F, "load", true, "WeatherManager")
end

function WeatherManager:save(F)
	set_save_marker(F, "save", false, "WeatherManager")
	printf("WEATHER SAVE")
	F:w_stringZ(self.levelWeather)
	F:w_stringZ(self.period)
	F:w_u32(self.last_period_change_hour);
	F:w_u32(self.next_period_change_hour);
	printf("str = "..tostring(self:get_state_as_string()))
	if self:get_state_as_string() == "" then
		printf("str = empty string")
	end
	F:w_stringZ(self:get_state_as_string())
	F:w_u32(self.update_time)
	F:w_stringZ(tostring(self.weather_fx))
	if(self.weather_fx) then
		F:w_float(level.get_wfx_time())
	end
	set_save_marker(F, "save", true, "WeatherManager")
end

function get_weather_manager ()
	if weather_manager == nil then
		weather_manager = WeatherManager()
	end
	return weather_manager
end